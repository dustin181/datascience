how to define a list:
>>> names = [
...     'Alice',
...     'Bob',
...     'Dilbert',
... ]

how to open a file:
with open('hello.txt', 'w') as f:
    f.write('hello, world!')

String formatting:

1)>>> 'Hello, %s' % name
'Hello, Bob'

>>> 'Hey %(name)s, there is a 0x%(errno)x error!' % {
...     "name": name, "errno": errno }
'Hey Bob, there is a 0xbadc0ffee error!'

2) >>> 'Hello, {}'.format(name)
'Hello, Bob'

>>> 'Hey {name}, there is a 0x{errno:x} error!'.format(
...     name=name, errno=errno)
'Hey Bob, there is a 0xbadc0ffee error!'

3) >>> f'Hello, {name}!'
'Hello, Bob!'

>>> def greet(name, question):
...     return f"Hello, {name}! How's it {question}?"
...

>>> greet('Bob', 'going')
"Hello, Bob! How's it going?"

lambdas:

>>> add = lambda x, y: x + y
>>> add(5, 3)

inline lambda:

>>> (lambda x, y: x + y)(5, 3)

lambda sort:

>>> tuples = [(1, 'd'), (2, 'b'), (4, 'a'), (3, 'c')]
>>> sorted(tuples, key=lambda x: x[1])
[(4, 'a'), (2, 'b'), (3, 'c'), (1, 'd')]

decorators:

def strong(func):
    def wrapper():
        return '<strong>' + func() + '</strong>'
    return wrapper

def emphasis(func):
    def wrapper():
        return '<em>' + func() + '</em>'
    return wrapper

@strong
@emphasis
def greet():
    return 'Hello!'

>>> greet()
'<strong><em>Hello!</em></strong>'


argument unpacking:

def print_vector(x, y, z):
    print('<%s, %s, %s>' % (x, y, z))

>>> print_vector(0, 1, 0)
<0, 1, 0>

>>> tuple_vec = (1, 0, 1)
>>> list_vec = [1, 0, 1]
>>> print_vector(tuple_vec[0],
                 tuple_vec[1],
                 tuple_vec[2])
<1, 0, 1>

>>> print_vector(*tuple_vec)
<1, 0, 1>
>>> print_vector(*list_vec)
<1, 0, 1>

>>> genexpr = (x * x for x in range(3))
>>> print_vector(*genexpr)

>>> dict_vec = {'y': 0, 'z': 1, 'x': 1}

>>> print_vector(**dict_vec)
<1, 0, 1>

>>> print_vector(*dict_vec)
<y, x, z>

class toString:

class Car:
    def __init__(self, color, mileage):
        self.color = color
        self.mileage = mileage

    def __repr__(self):
       return (f'{self.__class__.__name__}('
               f'{self.color!r}, {self.mileage!r})')

    def __str__(self):
        return f'a {self.color} car'


deep copy:

>>> import copy
>>> xs = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> zs = copy.deepcopy(xs)

instance variable:

class Dog:
    num_legs = 4  # <- Class variable

    def __init__(self, name):
        self.name = name  # <- Instance variable

counter:

class CountedObject:
    num_instances = 0

    def __init__(self):
        self.__class__.num_instances += 1
